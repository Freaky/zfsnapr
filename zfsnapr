#!/usr/bin/env ruby
# frozen_string_literal: true

# Mount a recursive snapshot of all mounted ZFS datasets on a target directory
#
# Usage: zfsnapr mount /backup
#        zfsnapr umount /backup
#        zfsnapr execute /backup tar cvzf /dump/backup.tgz /backup

require 'English'
require 'digest/sha2'
require 'optparse'
require 'pathname'
require 'fileutils'
require 'set'

PROG = 'zfsnapr'
VERSION = '0.2.0-pre'

options = Struct.new(:root, :pools, :excludes, :exec, :suid, :devfs, :tmpfs, :passthrough).new

def ensure_path(path)
  Pathname.new(path).cleanpath.realpath
rescue SystemCallError => e
  abort("#{path}: #{e.message}")
end

parser = OptionParser.new do |opts|
  opts.banner = <<-BANNER
    Usage: #{$PROGRAM_NAME} [options] mount mountpoint
           #{$PROGRAM_NAME} [options] umount mountpoint
           #{$PROGRAM_NAME} [options] execute mountpoint command [args...]
  BANNER

  opts.on('-E', '--exclude PATH', 'Do not mount datasets under this path') do |path|
    (options.excludes ||= []) << path
  end

  opts.on('-r', '--root PATH', 'Only mount from the dataset mounted in this path') do |path|
    root = ensure_path(path)

    options.root = root.to_s
  end

  opts.on('-e', '--exec', 'Do not mount noexec') do
    options.exec = true
  end

  opts.on('-s', '--suid', 'Do not mount nosuid') do
    options.suid = true
  end

  opts.on('-V', '--version', 'Display program version and exit') do
    puts "#{PROG} #{VERSION}"
    exit
  end

  opts.on('-D', '--devfs', 'Mount a /dev in the target') do
    options.devfs = true
  end

  opts.on('-T', '--tmpfs PATH', 'Mount a tmpfs on this path within the target') do |path|
    (options.tmpfs ||= Set.new) << path
  end

  opts.on('-p', '--pool POOL', 'Include this pool in the snapshot') do |path|
    (options.pools ||= []) << path
  end

  opts.on('-P', '--passthrough PATH', 'Pass-through a location from the host') do |path|
    (options.passthrough ||= Set.new) << ensure_path(path).to_s
  end

  opts.on('-h', '--help', 'Display usage and exit') do
    puts opts
    exit
  end
end

args = ARGV.dup

begin
  parser.order!(args)
rescue OptionParser::InvalidOption => e
  abort(parser.to_s) unless %w[mount umount execute].include?(e.args.first)

  args = e.recover(args)
rescue StandardError => e
  abort("Argument parse failure: #{e}")
end

action = args.shift || abort(parser.to_s)
target_directory = args.shift || abort(parser.to_s)
target_directory = ensure_path(target_directory)

abort('Target location is not a directory') unless target_directory.directory?
abort('Will not mount to root') if target_directory.root?

target_directory = target_directory.to_s

snapshot = "#{PROG}-#{Digest::SHA256.hexdigest(target_directory)[0..15]}"

Dataset = Struct.new(:name, :mountpoint) do
  def pool
    name.split(%r{/|@}, 2).first
  end

  def mounted_under?(directory)
    mountpoint == directory ||
      mountpoint.start_with?(directory) && mountpoint[directory.length] == '/'
  end
end

def child_error(message)
  abort(message) unless $CHILD_STATUS.success?
end

# Since `umount -R` is platform-specific, we must make note of our mounts so we
# can reliably umount the tree without messing with system-specific means of
# listing mountpoints that might prove fragile
class MountpointStore
  attr_reader :filename

  def initialize(snapshot)
    @filename = "/tmp/#{PROG}-#{snapshot}.mounts"
  end

  def read_mountpoints
    File.open(filename, 'r') do |fd|
      fd.flock(File::LOCK_EX)
      fd.read.split("\000")
    end
  end

  def write_mountpoints
    File.open(filename, 'w') do |fd|
      fd.flock(File::LOCK_EX)
      mounts = Set.new
      writer = lambda do |mountpoint|
        return false unless mounts.add?(mountpoint)

        fd.write("\000") if mounts.any?
        fd.write(mountpoint)
        fd.flush
        true
      end
      yield writer
    end
  end

  def clear
    File.unlink(filename)
  end
end

module ZFS
  def self.list_pools
    pools = `zpool list -Ho name,altroot`
            .lines
            .map { |line| line.chomp.split("\t", 2) }
            .filter_map { |name, altroot| name if altroot == '-' }
    child_error('Unble to list pools')
    pools
  end

  def self.mounted_datasets
    datasets = `zfs list -Ho name,mounted`
               .lines
               .map { |line| line.chomp.split("\t", 2) }
               .select { |_, mounted| mounted == 'yes' }
               .map { |name, _| Dataset.new(name) }
    child_error('Unble to list datasets')

    # Mountpoints follow filesystem naming rules, so may be mangled by a normal
    # call to zfs list, e.g. if they contain a newline.
    # Sadly this seems the only safe way to deal with them.
    datasets.each { |dataset| dataset.mountpoint = dataset_mountpoint(dataset.name) }
    datasets.select!(&:mountpoint)
    datasets.sort_by!(&:mountpoint)

    datasets
  end

  def self.dataset_mountpoint(dataset)
    mountpoint = `zfs list -Hpo mountpoint #{dataset}`.chomp("\n")
    child_error("Unble to retrieve mountpoint for #{dataset}")
    return mountpoint if mountpoint.start_with?('/')
  end

  def self.snapshotted_datasets(snapshot)
    snapshots = `zfs list -t snapshot -Ho name`
                .lines.map { |line| Dataset.new(line.chomp) }
                .select { |dataset| dataset.name.split('@', 2).last == snapshot }
    child_error('Error listing snapshots')
    snapshots
  end

  def self.snapshot_create(pools, snapshot)
    pools.map { |pool| "#{pool}@#{snapshot}" }.each do |snap|
      system "zfs snapshot -r #{snap}"
      child_error("Error creating snapshot on #{snap}")
      system "zfs hold -r #{snapshot} #{snap}"
      child_error("Error holding snapshot on #{snap}")
      system "zfs destroy -dr #{snap}"
      child_error("Error performing deferred destroy on #{snap}")
    end
  end

  def self.snapshot_destroy(pools, snapshot)
    pools.map { |pool| "#{pool}@#{snapshot}" }.each do |snap|
      system "zfs release -r #{snapshot} #{snap}"
      child_error("Error releasing snapshot on #{snap}")
    end
  end

  # ZFS can be mounted under non-ZFS filesystems we won't otherwise see, e.g.
  # non-ZFS-on-root systems, or in cases where pools have been excluded.
  #
  # In this case, mount a tmpfs in which to create any intermediate directories
  # on whatever mountpoint actually exists at this point.
  def self.tmpfs_shim(mountpoint, target, mounts_store)
    return if File.exist?(mountpoint)

    parent = File.dirname(mountpoint)
    while parent.start_with?(target)
      if File.exist?(parent)
        if mounts_store.call(parent)
          system(*(%w[mount -t tmpfs tmpfs] + [parent]))
          child_error("Error mounting tmpfs on #{parent}")
        end
        FileUtils.mkdir_p(mountpoint)
        return
      end

      parent = File.dirname(parent)
    end
  end

  def self.snapshot_mount(snapshot, target, options)
    pools = list_pools
    pools &= options.pools if options.pools
    snapshot_create(pools, snapshot)

    mountopts = %w[ro]
    mountopts << 'noexec' unless options.exec
    mountopts << 'nosuid' unless options.suid
    mountopts = mountopts.join(',')

    datasets = mounted_datasets

    if options.root
      datasets.select! { |dataset| dataset.mounted_under?(options.root) }
    end

    if options.excludes
      datasets.reject! do |dataset|
        options.excludes.any? { |exc| dataset.mounted_under?(exc) }
      end
    end

    if options.pools
      datasets.select! { |dataset| options.pools.include?(dataset.pool) }
    end

    dataset_mountpoint = datasets.sort_by(&:mountpoint).map do |dataset|
      mountpoint = dataset.mountpoint
      mountpoint = dataset.mountpoint.delete_prefix(options.root) if options.root
      [dataset, File.join(target, mountpoint)]
    end

    MountpointStore.new(snapshot).write_mountpoints do |mounts_store|
      dataset_mountpoint.each do |dataset, mountpoint|
        tmpfs_shim(mountpoint, target, mounts_store)
        mounts_store.call(mountpoint)
        snapname = "#{dataset.name}@#{snapshot}"
        system(*(%w[mount -t zfs -o] + [mountopts, snapname, mountpoint]))
        child_error("Error mounting #{snapname} on #{mountpoint}")
      end

      if options.devfs
        mountpoint = File.join(target, 'dev')
        mounts_store.call(mountpoint)
        if RUBY_PLATFORM.include?('linux')
          system(*(%w[mount --bind -o rw /dev] + [mountpoint]))
          child_error("Error bind mounting /dev on #{mountpoint}")
        elsif RUBY_PLATFORM.include?('freebsd')
          system(*(%w[mount -t devfs devfs] + [mountpoint]))
          child_error("Error mounting devfs on #{mountpoint}")
        else
          warn('Dev mounting not supported on this platform')
        end
      end

      (options.tmpfs || []).each do |tmpfs|
        mountpoint = File.join(target, tmpfs)
        mounts_store.call(mountpoint)
        system(*(%w[mount -t tmpfs tmpfs] + [mountpoint]))
        child_error("Error mounting tmpfs on #{mountpoint}")
      end

      (options.passthrough || []).each do |src|
        mountpoint = File.join(target, src)
        mounts_store.call(mountpoint)
        if RUBY_PLATFORM.include?('linux')
          system(*(%w[mount --bind -o rw,exec] + [src, mountpoint]))
        elsif RUBY_PLATFORM.include?('freebsd')
          system(*(%w[mount_nullfs -o rw,exec] + [src, mountpoint]))
        else
          warn('Passthrough mounts not supported on this platform')
        end
        child_error("Error mounting nullfs from #{src} to #{mountpoint}")
      end
    end
  end

  def self.snapshot_umount(snapshot, target)
    snapshot_list = snapshotted_datasets(snapshot)
    abort("Snapshot #{snapshot} not found") unless snapshot_list.any?

    mountpoint_store = MountpointStore.new(snapshot)
    expanded_target = File.expand_path(target)

    begin
      errors = false
      mountpoint_store.read_mountpoints.sort.reverse_each do |mountpoint|
        next unless Pathname.new(mountpoint).mountpoint?

        unless File.expand_path(mountpoint).start_with?(expanded_target)
          abort("Stored mountpoint '#{mountpoint}' not within target")
        end
        system('umount', mountpoint)
        warn("Error umounting #{mountpoint}") unless $CHILD_STATUS.success?
        errors = true
      end
      mountpoint_store.clear unless errors
    rescue Errno::ENOENT
      warn('Mountpoint list not found, assuming already unmounted')
    end

    pools = snapshot_list.inject(Set.new) { |pools, dataset| pools.add(dataset.pool) }
    snapshot_destroy(pools, snapshot)
  end
end

case action
when 'mount' then ZFS.snapshot_mount(snapshot, target_directory, options)
when 'umount' then ZFS.snapshot_umount(snapshot, target_directory)
when 'execute'
  abort('No action specified') if args.empty?
  ZFS.snapshot_mount(snapshot, target_directory, options)
  system(*args)
  ZFS.snapshot_umount(snapshot, target_directory)
  exit($CHILD_STATUS.exitstatus)
else
  abort('Invalid action specified')
end
